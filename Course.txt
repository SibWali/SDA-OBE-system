class Course
{
	string name;
	float creditHours;
	string courseCode;
	CLO** CLOs;	// Array of pointers to CLO class
	int size;
	int totalCLOs;
	int id;
public:
	Course(string _name, int _id, float _creditHours, string _courseCode)	// Constructor
	{
		this->id = _id;
		this->creditHours = _creditHours;
		this->courseCode = _courseCode;
		this->name = _name;
		this->size = 10;	// Initial size of array
		this->CLOs = new CLO * [this->size];	// Dynamically allocating array
		this->totalCLOs = 0;	// Initially no CLOs
	}
	void edit(string _name, float _creditHours, string _courseCode)	// Edit course
	{
		this->creditHours = _creditHours;
		this->courseCode = _courseCode;
		this->name = _name;
	}
	int getID()
	{
		return id;
	}
	void getAllCLOs(CLO**& list, int& total)	// Get all CLOs
	{
		list = this->CLOs;
		total = this->totalCLOs;
	}
	void addCLO(CLO* _CLO)
	{
		if (size == totalCLOs)
		{
			CLO** temp = CLOs;	// Temporary array
			size += 10;
			CLOs = new CLO * [size];	// Dynamically allocating new array
			for (int i = 0; i < totalCLOs; i++)	// Copying elements from temp to CLOs
				CLOs[i] = temp[i];
			delete[] temp;	// Deleting temp array
		}
		CLOs[totalCLOs++] = _CLO;	// Adding CLO to array
	}
	void removeCLO(int _id)
	{
		for (int i = 0; i < totalCLOs; i++)	// Searching for CLO
		{
			if (CLOs[i]->getID() == _id)	// If CLO found
			{
				for (; i < totalCLOs - 1; i++)	// Shifting elements
				{
					CLOs[i] = CLOs[i + 1];
				}
				totalCLOs--;	// Decreasing totalCLOs
			}
		}
	}
	bool findCLOs(CLO** list, int total)
	{
		for (int i = 0; i < totalCLOs; i++)	// Searching for CLO
		{
			for (int j = 0; j < total; j++)
			{
				if (list[j]->getID() == this->CLOs[i]->getID())	// If CLO found
					return true;	// Return true
			}
		}
		return false;	// Return false
	}
	void saveData(ofstream& fout)	// Save data
	{
		fout << name << endl;
		fout << id << endl;
		fout << courseCode << endl;
		fout << creditHours << endl;
		fout << totalCLOs << endl;
		for (int i = 0; i < totalCLOs; i++)
		{
			fout << CLOs[i]->getID() << endl;	// Saving all CLOs
		}
	}
	void print()
	{
		cout << "Course Name : " << name << "     ID : " << id << endl;
		cout << "Course Code : " << courseCode << "     Credit Hours : " << creditHours << endl;
		cout << "Following CLOs are included in this Course" << endl;
		for (int i = 0; i < totalCLOs; i++)
			CLOs[i]->print();	// Printing all CLOs
		//cout<<"__________________________________________________"<<endl;
	}
	~Course()
	{
		if (size)	// If size is not 0
			delete[] CLOs;	// Delete array
	}
};